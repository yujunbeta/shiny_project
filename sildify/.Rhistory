evtype$CROPDMG_DOLAR <- ifelse(is.na(evtype$CROPDMG_DOLAR), 0, evtype$CROPDMG_DOLAR)
}
deal(tornadoes)
file_name="F:/coursera/Data Science/peer assignment/RepData_PeerAssessment2/repdata-data-StormData.csv.bz2"
data <- read.csv(bzfile(file_name), colClasses = "character", stringsAsFactors = F)
data<-data[,c("EVTYPE","FATALITIES","INJURIES","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")]
tornadoes<-data[grep("[Tt][Oo][Rr][Nn][Aa][Dd][Oo][Ee]", data$EVTYPE, ignore.case=TRUE), ]
wind<-data[grep("[Ww][Ii][Nn][Dd]", data$EVTYPE, ignore.case=TRUE), ]
hail<-data[grep("[Hh][Aa][Ii][Ll]", data$EVTYPE, ignore.case=TRUE), ]
lightning<-data[grep("[Ll][Ii][Gg][Hh][Tt][Nn][Ii][Nn][Gg]", data$EVTYPE, ignore.case=TRUE), ]
floods<-data[grep("[Ff][Ll][Oo][Oo][Dd]", data$EVTYPE, ignore.case=TRUE),]
hurricane<-data[grep("[Hh][Uu][Rr][Rr][Ii][Cc][Aa][Nn][Ee]", data$EVTYPE, ignore.case=TRUE), ]
ice_storms<-data[grep("[Ii][Cc][Ee] [Ss][Tt][Oo][Rr][Mm]", data$EVTYPE, ignore.case=TRUE), ]
snow<-data[grep("[Ss][Nn][Oo][Ww]", data$EVTYPE, ignore.case=TRUE), ]
heat<-data[grep("[Hh][Ee][Aa][Tt]", data$EVTYPE, ignore.case=TRUE), ]
cold<-data[grep("[Cc][Oo][Ll][Dd]", data$EVTYPE, ignore.case=TRUE), ]
drought<-data[grep("[Dd][Rr][Oo][Uu][Gg][Hh][Tt]", data$EVTYPE, ignore.case=TRUE), ]
wildfires<-data[grep("[Ww][Ii][Ll][Dd][Ff][Ii][Rr][Ee]", data$EVTYPE, ignore.case=TRUE), ]
deal<-function(evtype){
for (i in c(2, 3, 4, 6)) {
evtype[[i]] <- as.numeric(evtype[[i]])
}
get_exp_num <- function(x) {
switch(x, H = 2, h = 2, K = 3, k = 3, M = 6, m = 6, B = 9, b = 9, x)
}
evtype$PROPDMGEXP_NUM <- sapply(evtype$PROPDMGEXP, get_exp_num)
evtype$CROPDMGEXP_NUM <- sapply(evtype$CROPDMGEXP, get_exp_num)
evtype$PROPDMG_DOLAR <- evtype$PROPDMG * (10^as.numeric(evtype$PROPDMGEXP_NUM))
evtype$CROPDMG_DOLAR <- evtype$CROPDMG * (10^as.numeric(evtype$CROPDMGEXP_NUM))
evtype$PROPDMG_DOLAR <- ifelse(is.na(evtype$PROPDMG_DOLAR), 0, evtype$PROPDMG_DOLAR)
evtype$CROPDMG_DOLAR <- ifelse(is.na(evtype$CROPDMG_DOLAR), 0, evtype$CROPDMG_DOLAR)
}
deal(tornadoes)
tornadoes
tornadoes$CROPDMG_DOLAR
deal(tornadoes)$CROPDMG_DOLAR
deal<-function(evtype){
for (i in c(2, 3, 4, 6)) {
evtype[[i]] <- as.numeric(evtype[[i]])
}
get_exp_num <- function(x) {
switch(x, H = 2, h = 2, K = 3, k = 3, M = 6, m = 6, B = 9, b = 9, x)
}
evtype$PROPDMGEXP_NUM <- sapply(evtype$PROPDMGEXP, get_exp_num)
evtype$CROPDMGEXP_NUM <- sapply(evtype$CROPDMGEXP, get_exp_num)
evtype$PROPDMG_DOLAR <- evtype$PROPDMG * (10^as.numeric(evtype$PROPDMGEXP_NUM))
evtype$CROPDMG_DOLAR <- evtype$CROPDMG * (10^as.numeric(evtype$CROPDMGEXP_NUM))
evtype$PROPDMG_DOLAR <- ifelse(is.na(evtype$PROPDMG_DOLAR), 0, evtype$PROPDMG_DOLAR)
evtype$CROPDMG_DOLAR <- ifelse(is.na(evtype$CROPDMG_DOLAR), 0, evtype$CROPDMG_DOLAR)
return(evtype)
}
deal(tornadoes)
?with
sapply(tornadoes,sum)
sapply(tornadoes[,-1],sum)
names(tornadoes)
sum(tornadoes[,2])
sum(as.numeric(tornadoes[,2]))
sum(as.numeric(tornadoes[,2]),na.rm=T)
tornadoes<-deal(tornadoes)
wind<-deal(wind)
hail<-deal(hail)
lightning<-deal(lightning)
floods<-deal(floods)
hurricane<-deal(hurricane)
ice_storms<-deal(ice_storms)
snow<-deal(snow)
heat<-deal(heat)
cold<-deal(cold)
drought<-deal(drought)
wildfires<-deal(wildfires)
sum(as.numeric(tornadoes[,2]))
sapply(tornadoes,sumna)
sumna<-function(data) sum(data,na.rm=T)
sapply(tornadoes,sumna)
sumna(tornadoes[,-1])
sumna(tornadoes[,2])
sumna(tornadoes[,3])
name(tornadoes)
names(tornadoes)
name<-c("tornadoes","wind","hail","lightning","floods","hurricanes","ice storms", "snow","heat","cold","droughts","wildfires")
name
sumna(get(name[1])[,2])
num<-NULL
for(i in seq(name)){
num[i]<-nrow(get(name[i]))
}
fatalities<-NULL
for(i in seq(name)){
fatalities[i]<-sumna(get(name[i])[,2])
}
injuries<-NULL
for(i in seq(name)){
injuries[i]<-sumna(get(name[i])[,3])
}
propdmg<-NULL
for(i in seq(name)){
propdmg[i]<-sumna(get(name[i])[,10])
}
cropdmgC<-NULL
for(i in seq(name)){
cropdmg[i]<-sumna(get(name[i])[,11])
}
stormDamage<-data.frame(evtype=name,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
name<-c("tornadoes","wind","hail","lightning","floods","hurricane","ice_storms", "snow","heat","cold","droughts","wildfires")
num<-NULL
for(i in seq(name)){
num[i]<-nrow(get(name[i]))
}
fatalities<-NULL
for(i in seq(name)){
fatalities[i]<-sumna(get(name[i])[,2])
}
injuries<-NULL
for(i in seq(name)){
injuries[i]<-sumna(get(name[i])[,3])
}
propdmg<-NULL
for(i in seq(name)){
propdmg[i]<-sumna(get(name[i])[,10])
}
cropdmgC<-NULL
for(i in seq(name)){
cropdmg[i]<-sumna(get(name[i])[,11])
}
stormDamage<-data.frame(evtype=name,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
name<-c("tornadoes","wind","hail","lightning","floods","hurricane","ice_storms", "snow","heat","cold","drought","wildfires")
num<-NULL
for(i in seq(name)){
num[i]<-nrow(get(name[i]))
}
fatalities<-NULL
for(i in seq(name)){
fatalities[i]<-sumna(get(name[i])[,2])
}
injuries<-NULL
for(i in seq(name)){
injuries[i]<-sumna(get(name[i])[,3])
}
propdmg<-NULL
for(i in seq(name)){
propdmg[i]<-sumna(get(name[i])[,10])
}
cropdmgC<-NULL
for(i in seq(name)){
cropdmg[i]<-sumna(get(name[i])[,11])
}
stormDamage<-data.frame(evtype=name,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
cropdmg<-NULL
for(i in seq(name)){
cropdmg[i]<-sumna(get(name[i])[,11])
}
stormDamage<-data.frame(evtype=name,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
stormDamage
stormDamage<-data.frame(evtype=name,num=num,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
stormDamage
sum(lightning[,10])
sum(lightning[,11])
num<-NULL
for(i in seq(name)){
num[i]<-nrow(get(name[i]))
}
fatalities<-NULL
for(i in seq(name)){
fatalities[i]<-sumna(get(name[i])[,2])
}
injuries<-NULL
for(i in seq(name)){
injuries[i]<-sumna(get(name[i])[,3])
}
propdmg<-NULL
for(i in seq(name)){
propdmg[i]<-sumna(get(name[i])[,10])
}
cropdmg<-NULL
for(i in seq(name)){
cropdmg[i]<-sumna(get(name[i])[,11])
}
stormDamage<-data.frame(evtype=name,num=num,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
stormDamage
i=4
sumna(get(name[i])[,10])
propdmg
propdmg[4]
sumna(get(name[5])[,10])
?sum
floods[,11]
sum(floods[,11])
is.numeric(floods[,11]))
is.numeric(floods[,11])
is.nan(floods[,11])
sum(is.nan(floods[,11]))
is.finite(floods[,11])
sum(is.finite(floods[,11]))
stormDamage
stormDamage[5,5]<-sumna(get(name[i])[is.finite(get(name[i])[,10]),10])
stormDamage[5,6]<-sumna(get(name[i])[is.finite(get(name[i])[,11]),11])
stormDamage
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,xlab="Whether Events",ylab="Cases",main="Fatalities",las=1)
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,xlab="Whether Events",ylab="Cases",main="Fatalities",las=1,horiz=TRUE)
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",horiz=TRUE)
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE)
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.8)
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.6)
barplot(stormDamage$injuries,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.6)
barplot(stormDamage$propdmg+stormDamage$cropdmg,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.6)
barplot(log(stormDamage$propdmg+stormDamage$cropdmg),names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.6)
tornadoes<-data[grep("[Tt][Oo][Rr][Nn][Aa][Dd][Oo][Ee]", data$EVTYPE, ignore.case=TRUE), ]
wind<-data[grep("[Hh][Ii][Gg][Hh][? ][Ww][Ii][Nn][Dd]", data$EVTYPE, ignore.case=TRUE), ]
hail<-data[grep("[Hh][Aa][Ii][Ll]", data$EVTYPE, ignore.case=TRUE), ]
lightning<-data[grep("[Ll][Ii][Gg][Hh][Tt][Nn][Ii][Nn][Gg]", data$EVTYPE, ignore.case=TRUE), ]
floods<-data[grep("[Ff][Ll][Oo][Oo][Dd]", data$EVTYPE, ignore.case=TRUE),]
hurricane<-data[grep("[Hh][Uu][Rr][Rr][Ii][Cc][Aa][Nn][Ee]", data$EVTYPE, ignore.case=TRUE), ]
ice_storms<-data[grep("[Ii][Cc][Ee] [Ss][Tt][Oo][Rr][Mm]", data$EVTYPE, ignore.case=TRUE), ]
snow<-data[grep("[Ss][Nn][Oo][Ww]", data$EVTYPE, ignore.case=TRUE), ]
heat<-data[grep("[Hh][Ee][Aa][Tt]", data$EVTYPE, ignore.case=TRUE), ]
cold<-data[grep("[Cc][Oo][Ll][Dd]", data$EVTYPE, ignore.case=TRUE), ]
drought<-data[grep("[Dd][Rr][Oo][Uu][Gg][Hh][Tt]", data$EVTYPE, ignore.case=TRUE), ]
wildfires<-data[grep("[Ww][Ii][Ll][Dd][Ff][Ii][Rr][Ee]", data$EVTYPE, ignore.case=TRUE), ]
tornadoes<-deal(tornadoes)
wind<-deal(wind)
hail<-deal(hail)
lightning<-deal(lightning)
floods<-deal(floods)
hurricane<-deal(hurricane)
ice_storms<-deal(ice_storms)
snow<-deal(snow)
heat<-deal(heat)
cold<-deal(cold)
drought<-deal(drought)
wildfires<-deal(wildfires)
sumna<-function(data) sum(data,na.rm=T)
name<-c("tornadoes","wind","hail","lightning","floods","hurricane","ice_storms", "snow","heat","cold","drought","wildfires")
num<-NULL
for(i in seq(name)){
num[i]<-nrow(get(name[i]))
}
fatalities<-NULL
for(i in seq(name)){
fatalities[i]<-sumna(get(name[i])[,2])
}
injuries<-NULL
for(i in seq(name)){
injuries[i]<-sumna(get(name[i])[,3])
}
propdmg<-NULL
for(i in seq(name)){
propdmg[i]<-sumna(get(name[i])[,10])
}
cropdmg<-NULL
for(i in seq(name)){
cropdmg[i]<-sumna(get(name[i])[,11])
}
stormDamage<-data.frame(evtype=name,num=num,fatalities=fatalities,injuries=injuries,propdmg=propdmg,cropdmg=cropdmg)
stormDamage[5,5]<-sumna(get(name[i])[is.finite(get(name[i])[,10]),10])
stormDamage[5,6]<-sumna(get(name[i])[is.finite(get(name[i])[,11]),11])
stormDamage
barplot(stormDamage$fatalities,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.6)
barplot(stormDamage$injuries,names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="Fatalities",las=1,horiz=TRUE,cex.names=0.6)
barplot(log(stormDamage$propdmg+stormDamage$cropdmg),names.arg=stormDamage$evtype,ylab="",xlab="Cases",main="economic consequences",las=1,horiz=TRUE,cex.names=0.6)
options(rpubs.upload.method = "internal")
getOption("rpubs.upload.method")
options(rpubs.upload.method = "internal")
getOption("rpubs.upload.method")
getOption("rpubs.upload.method")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
set.seed(125)
inTrain <- createDataPartition(y=iris$Class,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Class ~ .,method="rpart",data=training)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Class,
p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ .,method="rpart",data=training)
modFit
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Class,
p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ TotalIntench2+FiberWidthCh1+PerimStatusCh1+VarIntenCh4,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
names(segmentationOriginal)
modFit <- train(Class ~ TotalIntenCh2+FiberWidthCh1+PerimStatusCh1+VarIntenCh4,method="rpart",data=training)
print(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
print(modFit$finalModel)
predict(modFit,newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
?train
set.seed(13234)
modFit <- train(chd ~age+tobacco+ldl+obesity+alcohol+typea,method="glm",family="binomial",data=trainSA)
pre<-prediction(modFit,trainSA)
pre<-predict(modFit,trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,pre)
head(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit <- train(y~ .,data=vowel.train,method="rf",prox=TRUE)
varImp(modFit)
varImp(modFit$finalModel)
?varImp
summary(modFit)
modFit$importance
modFit$call
modFit
varImp(modFit$importance)
varImp(modFit)
str(modFit)
varImp(modFit$ finalModel)
modFit$ finalModel$ importance
sort(modFit$ finalModel$ importance)
order(modFit$ finalModel$ importance)
varImp(modFit$ finalModel$ importance)
modFit
modFit <- train(factor(y)~ .,data=vowel.train,method="rf",prox=TRUE)
modFit
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength~ .,data=training,method="lasso")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength~ .,data=training,method="lasso")
modFit
modFit$finalModel
?plot.enet
plot.enet(modFit$finalModel)
plot.enet(modFit$finalModel,las=1)
coef(modFit$finalModel)
?plot.enet
A<-plot.enet(modFit$finalModel)
A
head(concrete)
plot.enet(modFit$finalModel,las=1,cex=0.5)
str(modFit$finalModel)
modFit$finalModel$ beta.pure
set.seed( 325)
modFit <- train(CompressiveStrength~ .,data=training,method="svm")
?train
names(getModelInfo())
install.packages("forecast")
set.seed( 325)
modFit <- train(CompressiveStrength~ .,data=training,method="svmLinear")
install.packages("kernlab")
set.seed( 325)
modFit <- train(CompressiveStrength~ .,data=training,method="svmLinear")
modFit
pre<-predict(modFit,testing)
pre
mean((testing$CompressiveStrength-pre)^2)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength ~ .,data=training,method="lasso", trace=TRUE)
plot.enet(modFit$finalModel, xvar = "penalty", use.color = TRUE)
names(training)
data<-read.csv("F:/coursera/Data Science/peer assignment/data mining/pml-training.csv")
head(data)
grep(c("ab","cd"),"abdcdsdcnmsakjf")
data<-data[,-c(grep("kurtosis",names(data)),grep("skewness",names(data)),grep("max",names(data)),grep("min",names(data)),grep("amplitude",names(data)),grep("var",names(data)),grep("avg",names(data)),grep("stddev",names(data)))]
head(data)
data<-data[,-c(1:2,5:7)]
data
inTrain <- createDataPartition(y=data$classe,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
inTrain <- createDataPartition(y=data$classe,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
modFit
head(training)
training <- data[inTrain,]
testing <- data[-inTrain,]
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
warnings()
library(e1071)
modFit <- svm(classe~ .,data=training,cross=10,type="C-classification")
pred1 <- predict(modFit,training)
table(pred1,training$classe)
A<-table(pred1,training$classe)
str(A)
is.matrix(A)
diag(A)/sum(A)
sum(diag(A))/sum(A)
pred2 <- predict(modFit,testing)
table(pred2,testing$classe)
B<- table(pred2,testing$classe)
sum(diag(B))/sum(B)
library(ROCR)
pred <- prediction(pred1, training$classe)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
grid(5, 5, lwd = 1)
points(c(0,1), c(0,1), type="l", lty=2, lwd=2, col="grey")
p<--attr(pred1,"decision.values")
pred<-predict(modFit,training,decision.values = TRUE)
p<--attr(pred1,"decision.values")
p<--attr(pred,"decision.values")
predd <- prediction(pred, training$classe)
perf <- performance(predd,"tpr","fpr")
predd <- prediction(p, training$classe)
length(p)
length(training$classe)
test<-read.csv("F:/coursera/Data Science/peer assignment/data mining/pml-testing.csv")
test<-test[,-c(grep("kurtosis",names(data)),grep("skewness",names(data)),grep("max",names(data)),grep("min",names(data)),grep("amplitude",names(data)),grep("var",names(data)),grep("avg",names(data)),grep("stddev",names(data)))]
test<-test[,-c(1:2,5:7)]
pred<-predict(modFit,test)
head(test)
test<-read.csv("F:/coursera/Data Science/peer assignment/data mining/pml-testing.csv")
test<-test[,-c(grep("kurtosis",names(test)),grep("skewness",names(test)),grep("max",names(test)),grep("min",names(test)),grep("amplitude",names(test)),grep("var",names(test)),grep("avg",names(test)),grep("stddev",names(test)))]
head(test)
test<-test[,-c(1:2,5:7)]
pred<-predict(modFit,test)
pred
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
getwd()
pml_write_files(pred)
pred<-predict(modFit,test,decision.values = TRUE)
p<--attr(pred1,"decision.values")
p<--attr(pred,"decision.values")
p
p[3,]
order(p[3,])
p[11,]
order(p[11,])
modFit
library(slidify)
author(yujunbeta)
author(beta)
author(yujun)
library(slidify)
setwd("F:/")
author("yujunbeta")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
?iris
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
